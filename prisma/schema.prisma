generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int                @id(map: "user_pk") @default(autoincrement())
  name        String?
  comments    Comment[]          @relation("comment_writer")
  posts       Post[]             @relation("post_author")
  creators    UserSubscription[] @relation("creators")
  subscribers UserSubscription[] @relation("subscribers")
}

model Post {
  id            Int       @id(map: "post_pk") @default(autoincrement())
  title         String
  content       String?
  authorId      Int
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  toBeDeletedAt DateTime?
  comments      Comment[] @relation("comment_post")
  author        User      @relation("post_author", fields: [authorId], references: [id], map: "post_author_fk")
}

model Comment {
  id       Int    @id(map: "comment_pk") @default(autoincrement())
  content  String
  writerId Int
  postId   Int
  post     Post   @relation("comment_post", fields: [postId], references: [id], map: "comment_post_fk")
  writer   User   @relation("comment_writer", fields: [writerId], references: [id], map: "comment_writer_fk")
}

model UserSubscription {
  subscriberId Int
  creatorId    Int
  creator      User     @relation("creators", fields: [creatorId], references: [id], map: "user_creator_fk")
  subscriber   User     @relation("subscribers", fields: [subscriberId], references: [id], map: "user_subscriber_fk")
  createdAt    DateTime @default(now())

  @@id([subscriberId, creatorId], map: "user_subscription_pk")
}
